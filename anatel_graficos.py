# -*- coding: utf-8 -*-
"""Anatel_Graficos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wbh11fqh8KHHZJxu4pdOA24nR_hPiM-M

<img loading="lazy" src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/python/python-original.svg" width="40" height="40"/>   <img loading="lazy" src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/plotly/plotly-original-wordmark.svg" width="40" height="40"/>  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/streamlit/streamlit-original-wordmark.svg" width="40" height="40"/>

---
>
**Dev**: Gabriel Prata
>
**Data**: 01/04/2024
>
---

![Badge em Desenvolvimento](http://img.shields.io/static/v1?label=STATUS&message=EM%20DESENVOLVIMENTO&color=GREEN&style=for-the-badge)

#**<font color=#85d338 size="6"> 1. Import libraries**
"""

# Importa√ß√£o de pacotes
import pandas as pd
import numpy as np
import missingno as ms # para tratamento de missings

#bibliotecas para visualiza√ß√£o de dados
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

# Configura√ß√£o para n√£o exibir os warnings
import warnings
warnings.filterwarnings("ignore")

"""#**<font color=#85d338 size="6"> 2. Carga dos dados**

Carga do arquivo pre-processado gerado no notebook:
>
[<img loading="lazy" src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/github/github-original-wordmark.svg" width="40" height="40"/>](https://github.com/gabrielmprata/anatel/blob/main/Anatel_PreProcessamento.ipynb)
[<img src="https://img.shields.io/badge/Colab-F9AB00?style=for-the-badge&logo=googlecolab&color=525252"/>](https://github.com/gabrielmprata/anatel/blob/main/Anatel_PreProcessamento.ipynb)
"""

# importando dados de uma url para um dataframe

# URL de importa√ß√£o
url  = "https://raw.githubusercontent.com/gabrielmprata/anatel/main/datasets/banda_larga_fixa_2023.zip"

acesso_bl_2023 = pd.read_csv(url, compression='zip')

acesso_bl_2023.head()

"""#**<font color=#85d338 size="6"> 3. Constru√ß√£o dos gr√°ficos üìä**

###**<font color=#85d338> 3.1 Mapa do Brasil**
"""

# Dataframe agrupando por Uf
df_total_uf = acesso_bl_2023.groupby(["ano","mes","UF"])['Acessos'].sum().reset_index()

#Carga do Json com as limita√ß√µes dos estados brasileiros

from urllib.request import urlopen
import json
with urlopen('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson') as response:
    Brasil = json.load(response)

# definindo a informa√ß√£o do gr√°fico
state_id_map = {}
for feature in  Brasil["features"]:
    feature["id"] = feature["properties"]["sigla"]
    state_id_map[feature["properties"]["sigla"]] = feature["id"]

df_mapa = df_total_uf[(df_total_uf['mes'] == 12) & (df_total_uf['ano'] == 2023)].groupby(["UF"])['Acessos'].sum().reset_index()

#Plotando o mapa
fig = px.choropleth_mapbox(
 df_mapa, #database
 locations = 'UF', #define os limites no mapa
 geojson = Brasil, #Coordenadas geograficas dos estados
 color = "Acessos", #define a metrica para a cor da escala
 hover_name = 'UF', #informa√ß√£o no box do mapa
 hover_data =["UF"],
 #title = "Acessos", #titulo do mapa
 mapbox_style = "white-bg", #define o style do mapa
 center={"lat":-14, "lon": -55},#define os limites para plotar
 zoom = 2.5, #zoom inicial no mapa
 color_continuous_scale="greens", #cor dos estados
 #template='plotly_dark',
 opacity = 0.5 #opacidade da cor do mapa, para aparecer o fundo

)
fig.update_layout(
        plot_bgcolor='rgba(0, 0, 0, 0)',
        coloraxis_showscale=False, #Tira a legenda
        margin=dict(l=0, r=0, t=0, b=0),
        height=350
)

fig.show()

"""###**<font color=#85d338> 3.2 Heatmap**"""

# Ordenar o dataframe por UF para ordenar o eixo X
acesso_bl_2023.sort_values(by='UF', ascending=True,inplace=True)

fig0 = px.density_heatmap(acesso_bl_2023,
                         x="UF",
                         y="mes",
                         z="Acessos",
                         histfunc="sum",
                         color_continuous_scale="greens"
                         )

fig0.update_layout(yaxis = dict(
                                tickmode = 'array', # alterando o modo dos ticks
                                tickvals = acesso_bl_2023['mes'], # setando a posi√ß√£o do tick de x
                                ticktext = acesso_bl_2023['mes']),# setando o valor do tick de x
                                title="",
                                xaxis_title="",
                                yaxis_title="M√™s",
                                coloraxis_showscale=False, # tira a legenda
                                title_x = 0.5) #centralizando o titulo

#fig0.update_layout(        )

fig0.show()

"""<font color=#85d338> **Pivot Table**

Uma alternativa, pois o heatmap demora muito a carregar no streamlit
"""

df_total_uf['AcessosMM'] = (df_total_uf['Acessos'] /1000000).round(2)

pv_faixa = pd.pivot_table(df_total_uf, index=['mes'], aggfunc='sum', columns=['UF'], values=['AcessosMM'],fill_value=0)

pv_faixa = pv_faixa.sort_values(by=['mes'], ascending=False)

pv_faixa.style.background_gradient(cmap='Greens').format("{:,}")